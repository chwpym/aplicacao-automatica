#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Instalador do Sistema de Cat√°logo de Pe√ßas Automotivas
"""

import os
import sys
import subprocess
import json
import shutil
from pathlib import Path

def print_banner():
    """Exibe o banner do instalador"""
    print("="*60)
    print("üöó INSTALADOR DO SISTEMA DE CAT√ÅLOGO AUTOMOTIVO")
    print("="*60)
    print("Sistema de busca de aplica√ß√µes de pe√ßas automotivas")
    print("Suporte: Authomix, Sabo, Nakata e outros provedores")
    print("="*60)

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    print("üîç Verificando vers√£o do Python...")
    
    if sys.version_info < (3, 7):
        print("‚ùå ERRO: Python 3.7 ou superior √© necess√°rio!")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def install_requirements():
    """Instala as depend√™ncias necess√°rias"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    requirements = [
        "requests>=2.25.0",
        "pyperclip>=1.8.0",
        "beautifulsoup4>=4.9.0",
        "ttkthemes>=3.2.0"
    ]
    
    for req in requirements:
        try:
            print(f"   Instalando {req}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", req])
            print(f"   ‚úÖ {req} - OK")
        except subprocess.CalledProcessError as e:
            print(f"   ‚ùå Erro ao instalar {req}: {e}")
            return False
    
    return True

def create_desktop_shortcut():
    """Cria atalho na √°rea de trabalho"""
    print("\nüñ•Ô∏è Criando atalho na √°rea de trabalho...")
    
    try:
        desktop = Path.home() / "Desktop"
        if not desktop.exists():
            desktop = Path.home() / "√Årea de Trabalho"
        
        if desktop.exists():
            # Cria arquivo .bat para Windows
            bat_content = f'''@echo off
cd /d "{os.getcwd()}"
python app_catalogo_cursor.py
pause
'''
            
            bat_file = desktop / "Cat√°logo Automotivo.bat"
            with open(bat_file, 'w', encoding='utf-8') as f:
                f.write(bat_content)
            
            print(f"   ‚úÖ Atalho criado: {bat_file}")
            return True
        else:
            print("   ‚ö†Ô∏è √Årea de trabalho n√£o encontrada")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erro ao criar atalho: {e}")
        return False

def create_start_menu_shortcut():
    """Cria atalho no menu iniciar"""
    print("\nüìã Criando atalho no menu iniciar...")
    
    try:
        start_menu = Path.home() / "AppData" / "Roaming" / "Microsoft" / "Windows" / "Start Menu" / "Programs"
        if start_menu.exists():
            # Cria pasta para o aplicativo
            app_folder = start_menu / "Cat√°logo Automotivo"
            app_folder.mkdir(exist_ok=True)
            
            # Cria arquivo .bat
            bat_content = f'''@echo off
cd /d "{os.getcwd()}"
python app_catalogo_cursor.py
'''
            
            bat_file = app_folder / "Cat√°logo Automotivo.bat"
            with open(bat_file, 'w', encoding='utf-8') as f:
                f.write(bat_content)
            
            print(f"   ‚úÖ Atalho no menu iniciar criado")
            return True
        else:
            print("   ‚ö†Ô∏è Menu iniciar n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erro ao criar atalho no menu: {e}")
        return False

def verify_files():
    """Verifica se todos os arquivos necess√°rios existem"""
    print("\nüìÅ Verificando arquivos do sistema...")
    
    required_files = [
        "app_catalogo_cursor.py",
        "provedores.json",
        "siglas.json",
        "palavras_remover.json"
    ]
    
    missing_files = []
    
    for file in required_files:
        if os.path.exists(file):
            print(f"   ‚úÖ {file} - OK")
        else:
            print(f"   ‚ùå {file} - FALTANDO")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è Arquivos faltando: {', '.join(missing_files)}")
        return False
    
    return True

def create_uninstaller():
    """Cria script de desinstala√ß√£o"""
    print("\nüóëÔ∏è Criando script de desinstala√ß√£o...")
    
    uninstall_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de desinstala√ß√£o do Sistema de Cat√°logo
"""

import os
import sys
import subprocess
from pathlib import Path

def remove_shortcuts():
    """Remove atalhos criados"""
    try:
        # Remove atalho da √°rea de trabalho
        desktop = Path.home() / "Desktop"
        if not desktop.exists():
            desktop = Path.home() / "√Årea de Trabalho"
        
        bat_file = desktop / "Cat√°logo Automotivo.bat"
        if bat_file.exists():
            bat_file.unlink()
            print("‚úÖ Atalho da √°rea de trabalho removido")
        
        # Remove pasta do menu iniciar
        start_menu = Path.home() / "AppData" / "Roaming" / "Microsoft" / "Windows" / "Start Menu" / "Programs" / "Cat√°logo Automotivo"
        if start_menu.exists():
            shutil.rmtree(start_menu)
            print("‚úÖ Atalho do menu iniciar removido")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao remover atalhos: {e}")

def uninstall_packages():
    """Remove pacotes instalados"""
    packages = ["requests", "pyperclip", "beautifulsoup4", "ttkthemes"]
    
    for package in packages:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "uninstall", "-y", package])
            print(f"‚úÖ {package} removido")
        except:
            print(f"‚ö†Ô∏è {package} n√£o encontrado")

if __name__ == "__main__":
    print("üóëÔ∏è Desinstalando Sistema de Cat√°logo...")
    remove_shortcuts()
    uninstall_packages()
    print("‚úÖ Desinstala√ß√£o conclu√≠da!")
    input("Pressione Enter para sair...")
'''
    
    with open("uninstall.py", 'w', encoding='utf-8') as f:
        f.write(uninstall_content)
    
    print("   ‚úÖ Script de desinstala√ß√£o criado: uninstall.py")

def create_readme():
    """Cria arquivo README com instru√ß√µes"""
    print("\nüìñ Criando documenta√ß√£o...")
    
    readme_content = '''# Sistema de Cat√°logo Automotivo

## Descri√ß√£o
Sistema completo para busca de aplica√ß√µes de pe√ßas automotivas com suporte a m√∫ltiplos provedores.

## Provedores Suportados
- **Authomix**: Busca via GraphQL
- **Sabo**: Busca via GraphQL  
- **Nakata**: Busca via REST/HTML

## Como Usar

### Iniciar o Sistema
1. **Atalho da √Årea de Trabalho**: Clique duas vezes no atalho "Cat√°logo Automotivo"
2. **Menu Iniciar**: Iniciar ‚Üí Programas ‚Üí Cat√°logo Automotivo
3. **Linha de Comando**: `python app_catalogo_cursor.py`

### Funcionalidades
- üîç Busca por ID de pe√ßa
- üìã Sele√ß√£o de campos para exibi√ß√£o
- üì§ Exporta√ß√£o para CSV
- üìã C√≥pia para √°rea de transfer√™ncia
- üé® Temas visuais
- ‚öôÔ∏è Configura√ß√£o de provedores

### Campos Dispon√≠veis
- Marca
- Modelo  
- Ano
- Motor
- Configura√ß√£o Motor
- Posi√ß√£o
- Lado
- Dire√ß√£o
- Observa√ß√µes

## Configura√ß√£o

### Provedores
Edite `provedores.json` para configurar provedores:
```json
{
  "nome": "Nome do Provedor",
  "tipo": "graphql|rest",
  "ativo": true,
  "url": "URL da API",
  "headers": {...}
}
```

### Siglas
Edite `siglas.json` para configurar siglas de marcas.

### Palavras para Remover
Edite `palavras_remover.json` para configurar palavras que devem ser removidas dos resultados.

## Desinstala√ß√£o
Execute `python uninstall.py` para remover o sistema.

## Suporte
Para suporte t√©cnico, consulte a documenta√ß√£o ou entre em contato com o desenvolvedor.

---
**Vers√£o**: 1.0
**Data**: 2024
'''
    
    with open("README_INSTALACAO.md", 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print("   ‚úÖ Documenta√ß√£o criada: README_INSTALACAO.md")

def main():
    """Fun√ß√£o principal do instalador"""
    print_banner()
    
    # Verifica vers√£o do Python
    if not check_python_version():
        input("\nPressione Enter para sair...")
        return
    
    # Verifica arquivos
    if not verify_files():
        print("\n‚ùå Instala√ß√£o cancelada: arquivos necess√°rios n√£o encontrados")
        input("Pressione Enter para sair...")
        return
    
    # Instala depend√™ncias
    if not install_requirements():
        print("\n‚ùå Instala√ß√£o cancelada: erro ao instalar depend√™ncias")
        input("Pressione Enter para sair...")
        return
    
    # Cria atalhos
    create_desktop_shortcut()
    create_start_menu_shortcut()
    
    # Cria scripts auxiliares
    create_uninstaller()
    create_readme()
    
    print("\n" + "="*60)
    print("‚úÖ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("="*60)
    print("\nüéâ O Sistema de Cat√°logo Automotivo foi instalado!")
    print("\nüìã Como usar:")
    print("   ‚Ä¢ √Årea de Trabalho: Clique no atalho 'Cat√°logo Automotivo'")
    print("   ‚Ä¢ Menu Iniciar: Iniciar ‚Üí Programas ‚Üí Cat√°logo Automotivo")
    print("   ‚Ä¢ Linha de Comando: python app_catalogo_cursor.py")
    print("\nüìñ Documenta√ß√£o: README_INSTALACAO.md")
    print("üóëÔ∏è Desinstalar: python uninstall.py")
    
    print("\n" + "="*60)
    input("Pressione Enter para finalizar...")

if __name__ == "__main__":
    main() 